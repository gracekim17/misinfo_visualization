{"version":3,"sources":["logo.svg","serviceWorker.js","components/round.jsx","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","headlineJson","require","Round","this","props","cards","map","card","index","key","className","getCardClasses","id","makeCurrentID","roundNo","isArrow","arrowcards","makeArrowID","relations","generateRelations","hasOwnProperty","round","headlineId","reljson","targetAnchor","sourceAnchor","targetId","makePrevID","isMisinfo","classes","Component","getArrowCards","rounds","roundJson","answerJson","i","length","App","useState","setRounds","fetchData","a","axios","get","response","data","reverse","document","getElementById","style","display","onClick","strokeColor","offset","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wLAAAA,EAAOC,QAAU,IAA0B,kC,o9aCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oHCdFC,EAAeC,EAAQ,IAqEZC,E,uKAlEH,IAAD,OACP,OACE,6BACGC,KAAKC,MAAMC,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACpB,yBAAKC,IAAKD,GACR,yBACEE,UAAW,EAAKC,eAAeX,EAAaO,GAAb,YAE9BP,EAAaO,GAAb,SACD,kBAAC,gBAAD,CAAeK,GAAI,EAAKC,cAAc,EAAKT,MAAMU,QAASP,IACxD,yBAAKG,UAAU,cAGhB,EAAKK,QAAQ,EAAKX,MAAMY,WAAYT,GACnC,kBAAC,gBAAD,CACEK,GAAI,EAAKK,YAAY,EAAKb,MAAMU,QAASP,GACzCW,UAAW,EAAKC,kBAAkB,EAAKf,MAAMU,QAASP,IAEtD,yBAAKG,UAAU,cAGjB,+BAGJ,yBAAKA,UAAU,WAAWV,EAAaO,GAAb,e,8BAO5BS,EAAYT,GAClB,OAAOS,EAAWI,eAAeb,K,wCAGjBc,EAAOC,GACvB,IAAIC,EAAU,CACZC,aAAc,OACdC,aAAc,SAGhB,OADAF,EAAQG,SAAWvB,KAAKwB,WAAWN,EAAOC,GACnC,CAACC,K,kCAGEF,EAAOC,GAEjB,MADS,SAAWD,EAAQ,IAAMC,I,iCAIzBD,EAAOC,GAEhB,MADS,UAAYD,EAAQ,GAAK,IAAMC,I,oCAI5BD,EAAOC,GAEnB,MADS,SAAWD,EAAQ,IAAMC,I,qCAIrBM,GACb,IAAIC,EAAU,QAEd,OADAA,GAAwB,WAAbD,EAAyB,UAAY,c,GA9DhCE,aC+CpB,SAASC,EAAcC,EAAQxB,GAC7B,IAAIyB,EAAY,GACZC,EAAa,GAEjB,GAAa,GAAT1B,EACF,OAAO0B,EAGT,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOxB,EAAQ,GAAG4B,OAAQD,IAC5CF,EAAUD,EAAOxB,EAAQ,GAAG2B,KAAM,EAGpC,IAASA,EAAI,EAAGA,EAAIH,EAAOxB,GAAO4B,OAAQD,IACpCF,EAAUb,eAAeY,EAAOxB,GAAO2B,MACzCD,EAAWF,EAAOxB,GAAO2B,KAAM,GAInC,OAAOD,EAGMG,MAlEf,WAAgB,IAAD,EACeC,mBAAS,MADxB,mBACNN,EADM,KACEO,EADF,KAIPC,EAAS,uCAAG,4BAAAC,EAAA,sEACOC,IAAMC,IAHhB,6BAEG,OACVC,EADU,OAEhBL,EAAUK,EAASC,KAAKC,WACxBC,SAASC,eAAe,UAAUC,MAAMC,QAAU,OAHlC,2CAAH,qDAMf,OACE,yBAAKxC,UAAU,OACb,sEACA,4BACEE,GAAG,SACHF,UAAU,2BACVyC,QAASX,GAHX,uBAOA,kBAAC,kBAAD,CAAiBY,YAAY,QAAQC,OAAO,KAC1C,wBAAI3C,UAAU,UACXsB,GACCA,EAAO1B,KAAI,SAACe,EAAOb,GACjB,OACE,wBAAIE,UAAU,QAAQD,IAAKD,GACd,IAAVA,EACC,qCAEA,qCAAWwB,EAAOI,OAAS5B,GAE7B,kBAAC,EAAD,CACEH,MAAOgB,EACPL,WAAYe,EAAcC,EAAQxB,GAClCM,QAASN,EAAQ,YCpCrC8C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFT,SAASC,eAAe,SHyHpB,kBAAmBS,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7022286b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport \"../css/round.css\";\nimport { ArcherElement } from \"react-archer\";\n\nvar headlineJson = require(\"../allHeadlines.json\");\n\nclass Round extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.cards.map((card, index) => (\n          <div key={index}>\n            <div\n              className={this.getCardClasses(headlineJson[card][\"isMisinfo\"])}\n            >\n              {headlineJson[card][\"headline\"]}\n              <ArcherElement id={this.makeCurrentID(this.props.roundNo, card)}>\n                <div className=\"arrowEnd\"></div>\n              </ArcherElement>\n\n              {this.isArrow(this.props.arrowcards, card) ? (\n                <ArcherElement\n                  id={this.makeArrowID(this.props.roundNo, card)}\n                  relations={this.generateRelations(this.props.roundNo, card)}\n                >\n                  <div className=\"arrowEnd\"></div>\n                </ArcherElement>\n              ) : (\n                <div></div>\n              )}\n            </div>\n            <div className=\"caption\">{headlineJson[card][\"tactic\"]}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  isArrow(arrowcards, card) {\n    return arrowcards.hasOwnProperty(card);\n  }\n\n  generateRelations(round, headlineId) {\n    var reljson = {\n      targetAnchor: \"left\",\n      sourceAnchor: \"right\",\n    };\n    reljson.targetId = this.makePrevID(round, headlineId);\n    return [reljson];\n  }\n\n  makeArrowID(round, headlineId) {\n    let id = \"arrow-\" + round + \"-\" + headlineId;\n    return id;\n  }\n\n  makePrevID(round, headlineId) {\n    let id = \"round-\" + (round - 1) + \"-\" + headlineId;\n    return id;\n  }\n\n  makeCurrentID(round, headlineId) {\n    let id = \"round-\" + round + \"-\" + headlineId;\n    return id;\n  }\n\n  getCardClasses(isMisinfo) {\n    let classes = \"card \";\n    classes += isMisinfo == \"Misinfo\" ? \"misinfo\" : \"neutral\";\n    return classes;\n  }\n}\n\nexport default Round;\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Round from \"./components/round\";\nimport { ArcherContainer } from \"react-archer\";\nimport \"./css/round.css\";\n\nfunction App() {\n  const [rounds, setRounds] = useState(null);\n  const apiURL = \"http://localhost:5000/vis\";\n\n  const fetchData = async () => {\n    const response = await axios.get(apiURL);\n    setRounds(response.data.reverse());\n    document.getElementById(\"button\").style.display = \"None\";\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Spread of Misinformation Visualization</h1>\n      <button\n        id=\"button\"\n        className=\"btn btn-secondary btn-sm\"\n        onClick={fetchData}\n      >\n        Make Visualization!\n      </button>\n      <ArcherContainer strokeColor=\"black\" offset=\"3\">\n        <ul className=\"Column\">\n          {rounds &&\n            rounds.map((round, index) => {\n              return (\n                <li className=\"Round\" key={index}>\n                  {index === 0 ? (\n                    <h2>Final</h2>\n                  ) : (\n                    <h2>Round {rounds.length - index}</h2>\n                  )}\n                  <Round\n                    cards={round}\n                    arrowcards={getArrowCards(rounds, index)}\n                    roundNo={index + 1}\n                  />\n                </li>\n              );\n            })}\n        </ul>\n      </ArcherContainer>\n    </div>\n  );\n}\n\nfunction getArrowCards(rounds, index) {\n  var roundJson = {};\n  var answerJson = {};\n\n  if (index == 0) {\n    return answerJson;\n  }\n\n  for (var i = 0; i < rounds[index - 1].length; i++) {\n    roundJson[rounds[index - 1][i]] = true;\n  }\n\n  for (var i = 0; i < rounds[index].length; i++) {\n    if (roundJson.hasOwnProperty(rounds[index][i])) {\n      answerJson[rounds[index][i]] = true;\n    }\n  }\n\n  return answerJson;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}